"""
This type stub file was generated by pyright.
"""

class Detector:
    '''
    Detector class is to detect language from specified text.
    Its instance is able to be constructed via the factory class DetectorFactory.

    After appending a target text to the Detector instance with .append(string),
    the detector provides the language detection results for target text via .detect() or .get_probabilities().

    .detect() method returns a single language name which has the highest probability.
    .get_probabilities() methods returns a list of multiple languages and their probabilities.

    The detector has some parameters for language detection.
    See set_alpha(double), .set_max_text_length(int) .set_prior_map(dict).

    Example:

        from langdetect.detector_factory import DetectorFactory
        factory = DetectorFactory()
        factory.load_profile('/path/to/profile/directory')

        def detect(text):
            detector = factory.create()
            detector.append(text)
            return detector.detect()

        def detect_langs(text):
            detector = factory.create()
            detector.append(text)
            return detector.get_probabilities()
    '''
    ALPHA_DEFAULT = ...
    ALPHA_WIDTH = ...
    ITERATION_LIMIT = ...
    PROB_THRESHOLD = ...
    CONV_THRESHOLD = ...
    BASE_FREQ = ...
    UNKNOWN_LANG = ...
    URL_RE = ...
    MAIL_RE = ...
    def __init__(self, factory) -> None:
        ...
    
    def set_verbose(self): # -> None:
        ...
    
    def set_alpha(self, alpha): # -> None:
        ...
    
    def set_prior_map(self, prior_map): # -> None:
        '''Set prior information about language probabilities.'''
        ...
    
    def set_max_text_length(self, max_text_length): # -> None:
        '''Specify max size of target text to use for language detection.
        The default value is 10000(10KB).
        '''
        ...
    
    def append(self, text): # -> None:
        '''Append the target text for language detection.
        If the total size of target text exceeds the limit size specified by
        Detector.set_max_text_length(int), the rest is cut down.
        '''
        ...
    
    def cleaning_text(self): # -> None:
        '''Cleaning text to detect
        (eliminate URL, e-mail address and Latin sentence if it is not written in Latin alphabet).
        '''
        ...
    
    def detect(self): # -> Literal['unknown']:
        '''Detect language of the target text and return the language name
        which has the highest probability.
        '''
        ...
    
    def get_probabilities(self): # -> list[Language]:
        ...
    


